# -*- coding: utf-8 -*-
"""Cryptocurrency Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S_dM7nrAn2yCPD73kAJtzdFWESXNJK_N
"""

!pip install yfinance

import pandas as pd
import yfinance as yf
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

print("Libraries imported successfully!")

cryptocurrencies = ['BTC-USD', 'ETH-USD', 'BNB-USD', 'SOL-USD', 'XRP-USD', 'DOGE-USD']
data = yf.download(cryptocurrencies,start='2022-01-01', end='2024-08-31')
data.head()

returns = adj_close.pct_change().dropna(axis=0)

data['BTC-Volatility'] = returns['BTC-USD'].rolling(window=30).std() * np.sqrt(30)
data['ETH-Volatility'] = returns['ETH-USD'].rolling(window=30).std() * np.sqrt(30)
data['XRP-Volatility'] = returns['XRP-USD'].rolling(window=30).std() * np.sqrt(30)
data['DOGE-Volatility'] = returns['DOGE-USD'].rolling(window=30).std() * np.sqrt(30)
data['BNB-Volatility'] = returns['BNB-USD'].rolling(window=30).std() * np.sqrt(30)
data['SOL-Volatility'] = returns['SOL-USD'].rolling(window=30).std() * np.sqrt(30)

btc_avg_volatility = data['BTC-Volatility'].mean()
eth_avg_volatility = data['ETH-Volatility'].mean()
xrp_avg_volatility = data['XRP-Volatility'].mean()
doge_avg_volatility = data['DOGE-Volatility'].mean()
bnb_avg_volatility = data['BNB-Volatility'].mean()
sol_avg_volatility = data['SOL-Volatility'].mean()

avg_volatilities = {
    'BTC': btc_avg_volatility,
    'ETH': eth_avg_volatility,
    'XRP': xrp_avg_volatility,
    'DOGE': doge_avg_volatility,
    'BNB': bnb_avg_volatility,
    'SOL': sol_avg_volatility
}

sorted_volatilities = sorted(avg_volatilities.items(), key=lambda item: item[1], reverse=True)
for crypto, volatility in sorted_volatilities:
    print(f"{crypto} Average Volatility: {volatility}")

adj_close = data['Adj Close']
adj_close.head()

fig,axs = plt.subplots(3,2, figsize = (17,5), gridspec_kw={'wspace': 0.1, 'hspace': 0.7})
axs[0,0].plot(adj_close['BTC-USD'])
axs[0,0].set_title('BTC-USD')

axs[0,1].plot(adj_close['ETH-USD'])
axs[0,1].set_title('ETH-USD')

axs[1,0].plot(adj_close['BNB-USD'])
axs[1,0].set_title('BNB-USD')

axs[1,1].plot(adj_close['SOL-USD'])
axs[1,1].set_title('SOL-USD')

axs[2,0].plot(adj_close['XRP-USD'])
axs[2,0].set_title('XRP-USD')

axs[2,1].plot(adj_close['DOGE-USD'])
axs[2,1].set_title('DOGE-USD')


plt.show()

fig,axs = plt.subplots(3,2, figsize = (17,5), gridspec_kw={'wspace': 0.1, 'hspace': 0.7})
y_lim_min, y_lim_max = -0.5, 0.5
for ax in axs.flatten():
    ax.set_ylim(y_lim_min, y_lim_max)
axs[0,0].plot(returns['BTC-USD'])
axs[0,0].set_title('Returns on BTC-USD')

axs[0,1].plot(returns['ETH-USD'])
axs[0,1].set_title('Returns on ETH-USD')

axs[1,0].plot(returns['BNB-USD'])
axs[1,0].set_title('Returns on BNB-USD')

axs[1,1].plot(returns['SOL-USD'])
axs[1,1].set_title('Returns on SOL-USD')

axs[2,0].plot(returns['XRP-USD'])
axs[2,0].set_title('Returns on XRP-USD')

axs[2,1].plot(returns['DOGE-USD'])
axs[2,1].set_title('Returns on DOGE-USD')

plt.show()

mean_returns = returns.mean()

# Plot the mean returns
plt.figure(figsize=(15, 5))
plt.bar(mean_returns.index, mean_returns.values)
plt.xlabel('Cryptocurrency')
plt.ylabel('Mean Daily Returns')
plt.title('Mean Daily Returns of Cryptocurrencies')
plt.xticks(rotation=45)
plt.show()

fig,axs = plt.subplots(3,2, figsize = (17,5), gridspec_kw={'wspace': 0.1, 'hspace': 0.7})
axs[0,0].hist(returns['BTC-USD'], bins = 100, range = (-0.3,0.3))
axs[0,0].set_title('Histogram of Returns on BTC-USD')

axs[0,1].hist(returns['ETH-USD'], bins = 100, range = (-0.3,0.3))
axs[0,1].set_title('Histogram of Returns on ETH-USD')

axs[1,0].hist(returns['BNB-USD'], bins = 100, range = (-0.3,0.3))
axs[1,0].set_title('Histogram of Returns on BNB-USD')

axs[1,1].hist(returns['SOL-USD'], bins = 100, range = (-0.3,0.3))
axs[1,1].set_title('Histogram of Returns on SOL-USD')

axs[2,0].hist(returns['XRP-USD'], bins = 100, range = (-0.3,0.3))
axs[2,0].set_title('Histogram of Returns on XRP-USD')

axs[2,1].hist(returns['DOGE-USD'], bins = 100, range = (-0.3,0.3))
axs[2,1].set_title('Histogram of Returns on DOGE-USD')

plt.show()

corr = returns.corr()
sns.heatmap(corr, annot=True, cmap= 'Blues')

sharpe_ratio = returns.mean() / returns.std() * np.sqrt(252)
print(sharpe_ratio)

